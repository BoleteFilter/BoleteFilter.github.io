{"version":3,"sources":["serviceWorker.js","components/Home.jsx","components/Support.jsx","components/Navigation.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","className","src","alt","React","Component","Support","props","withRouter","class","pathname","to","App","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iECESC,E,4JAhBb,WACE,OACE,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKC,IAAI,kBAAkBC,IAAI,wBAC/B,oBAAIF,UAAU,QAAd,8BAEF,sBAAKA,UAAU,MAAf,UACE,mFACA,kE,GAVSG,IAAMC,WCgBVC,MAff,SAAiBC,GACf,OACE,sBAAKN,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKC,IAAI,kBAAkBC,IAAI,wBAC/B,oBAAIF,UAAU,QAAd,wBAEF,sBAAKA,UAAU,MAAf,UACE,8DACA,+DCiBOO,mBA3Bf,SAAoBD,GAChB,OACI,qBAAKN,UAAU,GAAf,SACI,qBAAKQ,MAAM,GAAX,SACI,qBAAKA,MAAM,QAAX,SACI,qBAAIA,MAAM,OAAV,UACI,oBACIA,MAAK,oBAA2C,MAA5BF,EAAMV,SAASa,SAAmB,SAAW,IADrE,SAGI,cAAC,IAAD,CAAMD,MAAM,IAAIE,GAAG,IAAnB,oBAIJ,oBACIF,MAAK,oBAA2C,aAA5BF,EAAMV,SAASa,SAA0B,SAAW,IAD5E,SAGI,cAAC,IAAD,CAAMD,MAAM,IAAIE,GAAG,WAAnB,mCCGbC,MAdf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,KAAK,IAAIC,OAAK,EAACC,UAAW,kBAAM,cAAC,EAAD,OACvC,cAAC,IAAD,CAAOF,KAAK,WAAWC,OAAK,EAACC,UAAW,kBAAM,cAAC,EAAD,gBCTxDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SL6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29dbab73.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport '../App.css';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div className=\"App content\">\n        <div className=\"header\">\n          <img src=\"images/icon.png\" alt=\"Bolete filter icon.\" />\n          <h1 className='title'>Bolete Filter</h1>\n        </div>\n        <div className=\"bio\">\n          <p>Triage (A Synoptic Key) for North American Boletes</p>\n          <p>App Links to Come Soon!</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nimport '../App.css';\n\nfunction Support(props) {\n  return (\n    <div className=\"App content\">\n      <div className=\"header\">\n        <img src=\"images/icon.png\" alt=\"Bolete filter icon.\" />\n        <h1 className='title'>Support</h1>\n      </div>\n      <div className=\"bio\">\n        <p>Where Can I Download the App?</p>\n        <p>App Links to Come Soon!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Support;\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Navigation(props) {\n    return (\n        <div className=\"\">\n            <nav class=\"\">\n                <div class=\"lists\">\n                    <ul class=\"list\">\n                        <li\n                            class={`nav-item  ${props.location.pathname === \"/\" ? \"active\" : \"\"}`}\n                        >\n                            <Link class=\"a\" to=\"/\">\n                                Home\n                            </Link>\n                        </li>\n                        <li\n                            class={`nav-item  ${props.location.pathname === \"/support\" ? \"active\" : \"\"}`}\n                        >\n                            <Link class=\"a\" to=\"/support\">\n                                Support\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default withRouter(Navigation);","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport Support from \"./components/Support\";\nimport Navigation from \"./components/Navigation\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact component={() => <Home />} />\n          <Route path=\"/support\" exact component={() => <Support />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport { default as Navigation } from \"./components/Navigation\";\nexport { default as Home } from \"./components/Home\";\nexport { default as Support } from \"./components/Support\";\n"],"sourceRoot":""}